import json
import uuid
from typing import Dict, List, Optional
from datetime import datetime

from evolution_api_client import evolution_client
from supabase_client import supabase_manager
from semantic_search_system import SemanticSearchSystem

class WhatsAppService:
    def __init__(self):
        self.evolution_client = evolution_client
        self.supabase = supabase_manager
        self.semantic_search = SemanticSearchSystem('/home/ubuntu/structured_knowledge_refined.json')
        
        # Configura√ß√µes do agente
        self.agent_name = "Especialista em Tintas"
        self.greeting_message = "Ol√°! üëã Sou seu especialista em tintas. Como posso ajud√°-lo hoje?"
        
        # Estados de conversa
        self.conversation_states = {}
        
    def process_incoming_message(self, webhook_data: Dict) -> Dict:
        """Processa mensagem recebida via webhook da Evolution API"""
        try:
            # Processar dados do webhook
            processed = self.evolution_client.process_webhook_message(webhook_data)
            
            if processed.get('error'):
                return processed
            
            event_type = processed.get('event_type')
            
            if event_type == 'MESSAGES_UPSERT':
                return self._handle_message_received(processed)
            elif event_type == 'CONNECTION_UPDATE':
                return self._handle_connection_update(processed)
            elif event_type == 'QRCODE_UPDATED':
                return self._handle_qrcode_update(processed)
            else:
                return {'status': 'ignored', 'event_type': event_type}
                
        except Exception as e:
            return {'error': f'Erro ao processar mensagem: {str(e)}'}
    
    def _handle_message_received(self, message_data: Dict) -> Dict:
        """Processa mensagem recebida do usu√°rio"""
        try:
            # Extrair dados da mensagem
            phone_number = message_data.get('phone_number', '')
            message_content = message_data.get('message_content', '')
            from_me = message_data.get('from_me', False)
            
            # Ignorar mensagens enviadas pelo pr√≥prio bot
            if from_me:
                return {'status': 'ignored', 'reason': 'message_from_bot'}
            
            # Ignorar mensagens vazias ou de sistema
            if not message_content or message_content.startswith('['):
                return {'status': 'ignored', 'reason': 'empty_or_system_message'}
            
            # Buscar ou criar conversa
            conversation = self._get_or_create_conversation(phone_number)
            
            # Salvar mensagem do usu√°rio
            self.supabase.save_message(
                conversation['id'], 
                'user', 
                message_content,
                {'phone_number': phone_number, 'whatsapp_data': message_data}
            )
            
            # Gerar resposta do agente
            response = self._generate_agent_response(message_content, conversation['id'], phone_number)
            
            # Enviar resposta via WhatsApp
            if response.get('message'):
                send_result = self.send_message(phone_number, response['message'])
                
                # Salvar resposta do agente
                self.supabase.save_message(
                    conversation['id'],
                    'agent',
                    response['message'],
                    {
                        'search_results': response.get('search_results', []),
                        'products_found': response.get('products_found', []),
                        'send_result': send_result
                    }
                )
                
                return {
                    'status': 'processed',
                    'conversation_id': conversation['id'],
                    'response_sent': True,
                    'send_result': send_result
                }
            
            return {
                'status': 'processed',
                'conversation_id': conversation['id'],
                'response_sent': False
            }
            
        except Exception as e:
            return {'error': f'Erro ao processar mensagem recebida: {str(e)}'}
    
    def _handle_connection_update(self, connection_data: Dict) -> Dict:
        """Processa atualiza√ß√£o de status de conex√£o"""
        state = connection_data.get('connection_state')
        
        # Log da atividade
        self.supabase.log_activity(
            'whatsapp_connection_update',
            'connection',
            connection_data.get('instance_name'),
            {'state': state, 'timestamp': datetime.now().isoformat()}
        )
        
        return {'status': 'logged', 'connection_state': state}
    
    def _handle_qrcode_update(self, qrcode_data: Dict) -> Dict:
        """Processa atualiza√ß√£o do QR Code"""
        qr_code = qrcode_data.get('qr_code')
        
        # Log da atividade
        self.supabase.log_activity(
            'whatsapp_qrcode_update',
            'qrcode',
            qrcode_data.get('instance_name'),
            {'has_qrcode': bool(qr_code), 'timestamp': datetime.now().isoformat()}
        )
        
        return {'status': 'logged', 'qr_code_available': bool(qr_code)}
    
    def _get_or_create_conversation(self, phone_number: str) -> Dict:
        """Busca conversa existente ou cria uma nova"""
        # Gerar session_id baseado no n√∫mero de telefone
        session_id = f"whatsapp_{phone_number}"
        
        # Buscar conversa existente
        conversation = self.supabase.get_conversation_by_session(session_id)
        
        if not conversation:
            # Criar nova conversa
            conversation_id = self.supabase.create_conversation(
                session_id=session_id,
                platform='whatsapp',
                phone_number=phone_number
            )
            
            if conversation_id:
                conversation = {
                    'id': conversation_id,
                    'session_id': session_id,
                    'platform': 'whatsapp',
                    'phone_number': phone_number
                }
                
                # Enviar mensagem de boas-vindas
                self.send_message(phone_number, self.greeting_message)
                
                # Salvar mensagem de boas-vindas
                self.supabase.save_message(
                    conversation_id,
                    'agent',
                    self.greeting_message,
                    {'type': 'greeting'}
                )
        
        return conversation
    
    def _generate_agent_response(self, user_message: str, conversation_id: str, phone_number: str) -> Dict:
        """Gera resposta do agente baseada na mensagem do usu√°rio"""
        try:
            # Verificar se √© uma sauda√ß√£o
            greetings = ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite', 'hey', 'e a√≠']
            if any(greeting in user_message.lower() for greeting in greetings):
                return {
                    'message': f"Ol√°! üëã Sou seu {self.agent_name}. Posso ajud√°-lo com:\n\nüé® Recomenda√ß√µes de tintas\nüìè C√°lculo de quantidade\nüí∞ Or√ßamentos\nüîß Dicas t√©cnicas\n\nO que voc√™ precisa hoje?",
                    'search_results': [],
                    'products_found': []
                }
            
            # Verificar se √© uma solicita√ß√£o de or√ßamento
            if any(word in user_message.lower() for word in ['or√ßamento', 'orcamento', 'pre√ßo', 'preco', 'quanto custa', 'valor']):
                return self._handle_quote_request(user_message, conversation_id, phone_number)
            
            # Verificar se √© uma pergunta sobre c√°lculo
            if any(word in user_message.lower() for word in ['calcular', 'quantidade', 'litros', 'metros', '√°rea', 'area']):
                return self._handle_calculation_request(user_message)
            
            # Busca sem√¢ntica na base de conhecimento
            search_results = self.semantic_search.search(user_message, top_k=3)
            
            if search_results:
                # Encontrou produtos/informa√ß√µes relevantes
                response_parts = [f"Encontrei algumas informa√ß√µes que podem ajudar:\n"]
                
                products_found = []
                for i, result in enumerate(search_results[:2], 1):
                    product_info = result.get('metadata', {})
                    score = result.get('score', 0)
                    
                    if score > 0.5:  # Apenas resultados com boa relev√¢ncia
                        products_found.append(product_info)
                        
                        response_parts.append(f"üé® **{product_info.get('name', 'Produto')}**")
                        if product_info.get('brand'):
                            response_parts.append(f"Marca: {product_info.get('brand')}")
                        if product_info.get('description'):
                            response_parts.append(f"{product_info.get('description')}")
                        if product_info.get('coverage'):
                            response_parts.append(f"Rendimento: {product_info.get('coverage')}")
                        response_parts.append("")
                
                if products_found:
                    response_parts.append("üí¨ Gostaria de mais detalhes sobre algum produto ou precisa de um or√ßamento?")
                    
                    return {
                        'message': '\n'.join(response_parts),
                        'search_results': search_results,
                        'products_found': products_found
                    }
            
            # Resposta padr√£o quando n√£o encontra informa√ß√µes espec√≠ficas
            return {
                'message': f"Entendi sua pergunta sobre tintas. Posso ajud√°-lo de v√°rias formas:\n\nüîç **Buscar produtos espec√≠ficos** - Me diga que tipo de tinta precisa\nüìè **Calcular quantidade** - Informe as dimens√µes do ambiente\nüí∞ **Fazer or√ßamento** - Preciso saber a √°rea e o tipo de tinta\n‚ùì **Tirar d√∫vidas t√©cnicas** - Sobre aplica√ß√£o, cores, etc.\n\nO que voc√™ gostaria de fazer?",
                'search_results': [],
                'products_found': []
            }
            
        except Exception as e:
            return {
                'message': "Desculpe, tive um problema t√©cnico. Pode repetir sua pergunta?",
                'error': str(e),
                'search_results': [],
                'products_found': []
            }
    
    def _handle_quote_request(self, user_message: str, conversation_id: str, phone_number: str) -> Dict:
        """Processa solicita√ß√£o de or√ßamento"""
        # Buscar produtos mencionados na mensagem
        search_results = self.semantic_search.search(user_message, top_k=2)
        
        if search_results and search_results[0].get('score', 0) > 0.6:
            product = search_results[0].get('metadata', {})
            
            # Criar bot√µes para facilitar a intera√ß√£o
            buttons_message = f"Encontrei este produto para seu or√ßamento:\n\nüé® **{product.get('name', 'Produto')}**\n"
            if product.get('brand'):
                buttons_message += f"Marca: {product.get('brand')}\n"
            if product.get('coverage'):
                buttons_message += f"Rendimento: {product.get('coverage')}\n\n"
            
            buttons_message += "Para fazer o or√ßamento, preciso saber a √°rea a ser pintada. Voc√™ pode me informar:\n\nüìê As dimens√µes (largura x altura)\nüìè A √°rea total em m¬≤\n\nOu se preferir, posso te ajudar a calcular!"
            
            return {
                'message': buttons_message,
                'search_results': search_results,
                'products_found': [product]
            }
        else:
            return {
                'message': "Para fazer um or√ßamento preciso, me informe:\n\nüé® **Tipo de tinta** (ex: acr√≠lica, esmalte, etc.)\nüìç **Local de aplica√ß√£o** (quarto, sala, externa, etc.)\nüìè **√Årea a ser pintada** (em m¬≤ ou dimens√µes)\n\nCom essas informa√ß√µes posso te dar um or√ßamento detalhado!",
                'search_results': [],
                'products_found': []
            }
    
    def _handle_calculation_request(self, user_message: str) -> Dict:
        """Processa solicita√ß√£o de c√°lculo de quantidade"""
        return {
            'message': "Vou te ajudar a calcular a quantidade de tinta! üìè\n\nPreciso das seguintes informa√ß√µes:\n\nüìê **Dimens√µes do ambiente:**\n‚Ä¢ Largura (metros)\n‚Ä¢ Altura (metros)\n‚Ä¢ N√∫mero de paredes\n\nüö™ **V√£os (portas e janelas):**\n‚Ä¢ √Årea total dos v√£os em m¬≤\n\nüé® **Tipo de tinta:**\n‚Ä¢ Qual tinta pretende usar?\n\nMe informe esses dados e calcularei exatamente quantos litros voc√™ precisar√°!",
            'search_results': [],
            'products_found': []
        }
    
    def send_message(self, phone_number: str, message: str) -> Dict:
        """Envia mensagem via WhatsApp"""
        try:
            result = self.evolution_client.send_text_message(phone_number, message)
            
            # Log da atividade
            self.supabase.log_activity(
                'whatsapp_message_sent',
                'message',
                None,
                {
                    'phone_number': phone_number,
                    'message_length': len(message),
                    'success': not result.get('error'),
                    'timestamp': datetime.now().isoformat()
                }
            )
            
            return result
            
        except Exception as e:
            return {'error': f'Erro ao enviar mensagem: {str(e)}'}
    
    def send_button_message(self, phone_number: str, text: str, buttons: List[Dict], footer: str = "") -> Dict:
        """Envia mensagem com bot√µes"""
        try:
            result = self.evolution_client.send_button_message(phone_number, text, buttons, footer)
            
            # Log da atividade
            self.supabase.log_activity(
                'whatsapp_button_message_sent',
                'message',
                None,
                {
                    'phone_number': phone_number,
                    'buttons_count': len(buttons),
                    'success': not result.get('error'),
                    'timestamp': datetime.now().isoformat()
                }
            )
            
            return result
            
        except Exception as e:
            return {'error': f'Erro ao enviar mensagem com bot√µes: {str(e)}'}
    
    def send_product_catalog(self, phone_number: str, products: List[Dict]) -> Dict:
        """Envia cat√°logo de produtos formatado"""
        try:
            if not products:
                return self.send_message(phone_number, "N√£o encontrei produtos para mostrar no momento.")
            
            catalog_message = "üé® **Cat√°logo de Tintas**\n\n"
            
            for i, product in enumerate(products[:5], 1):  # M√°ximo 5 produtos
                catalog_message += f"**{i}. {product.get('name', 'Produto')}**\n"
                if product.get('brand'):
                    catalog_message += f"Marca: {product.get('brand')}\n"
                if product.get('description'):
                    catalog_message += f"{product.get('description')[:100]}...\n"
                if product.get('coverage'):
                    catalog_message += f"Rendimento: {product.get('coverage')}\n"
                catalog_message += "\n"
            
            catalog_message += "üí¨ Digite o n√∫mero do produto para mais detalhes ou solicite um or√ßamento!"
            
            return self.send_message(phone_number, catalog_message)
            
        except Exception as e:
            return {'error': f'Erro ao enviar cat√°logo: {str(e)}'}
    
    def get_conversation_history(self, phone_number: str, limit: int = 10) -> List[Dict]:
        """Busca hist√≥rico de conversa"""
        try:
            session_id = f"whatsapp_{phone_number}"
            conversation = self.supabase.get_conversation_by_session(session_id)
            
            if conversation:
                return self.supabase.get_conversation_messages(conversation['id'], limit)
            
            return []
            
        except Exception as e:
            print(f"Erro ao buscar hist√≥rico: {e}")
            return []
    
    def get_whatsapp_stats(self) -> Dict:
        """Busca estat√≠sticas do WhatsApp"""
        try:
            stats = self.supabase.get_stats()
            
            # Adicionar estat√≠sticas espec√≠ficas do WhatsApp
            whatsapp_conversations = 0
            whatsapp_messages = 0
            
            # Aqui voc√™ pode adicionar queries espec√≠ficas para contar conversas e mensagens do WhatsApp
            
            stats.update({
                'whatsapp_conversations': whatsapp_conversations,
                'whatsapp_messages': whatsapp_messages,
                'evolution_api_configured': self.evolution_client.is_configured()
            })
            
            return stats
            
        except Exception as e:
            return {'error': f'Erro ao buscar estat√≠sticas: {str(e)}'}

# Inst√¢ncia global do servi√ßo WhatsApp
whatsapp_service = WhatsAppService()
